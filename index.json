[{"id":3,"pagetitle":"Introduction","title":"Introduction to the  CTBase.jl  package","ref":"/OptimalControl.jl/ctbase/stable/#Introduction-to-the-CTBase.jl-package","content":" Introduction to the  CTBase.jl  package The  CTBase.jl  package is part of the  control-toolbox ecosystem ."},{"id":4,"pagetitle":"Introduction","title":"Installation","ref":"/OptimalControl.jl/ctbase/stable/#Installation","content":" Installation To install a package from the control-toolbox ecosystem, please visit the  installation page ."},{"id":7,"pagetitle":"Introduction","title":"Introduction to the CTProblems.jl package","ref":"/OptimalControl.jl/ctproblems/stable/#introduction","content":" Introduction to the CTProblems.jl package The  CTProblems.jl  package is part of the  control-toolbox ecosystem . To install this package or another from the control-toolbox ecosystem, please visit the  installation page . The  CTProblems.jl  package provides a  list of optimal control problems . Each problem is composed of a short title, a model and the solution. You can get access to any problem by a simple  description , that is a  Tuple  of  Symbol . For instance, to get the energy minimisation exponential problem, simply using CTProblems\nprob = Problem(:exponential, :energy) title           = simple exponential - energy min\nmodel    (Type) = CTBase.OptimalControlModel{CTBase.Autonomous, CTBase.Fixed}\nsolution (Type) = CTBase.OptimalControlSolution Note In the example above, we have given a partial description to the function  Problem . The complete description of this problem is (:exponential, :energy, :x_dim_1, :u_dim_1, :lagrange) Warning If you give a partial description, then, if several complete descriptions contains the partial one, then, only the problem with the highest priority is returned. The higher in the list, the higher is the priority. See the  list of descriptions  to check the priorities. Once you have selected a problem, you can get access to its title: prob.title \"simple exponential - energy min\" Its model is given by prob.model \nt ∈ [t0, tf], time\nx ∈ R, state\nu ∈ R, control\nx(t0) == x0, initial_con\nx(tf) == xf, final_con\nẋ(t) == -(x(t)) + u(t)\n∫(0.5 * u(t) ^ 2) → min\n And you can plot the solution. plot(prob.solution, size=(700, 500))"}]